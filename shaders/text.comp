#version 450

layout (set = 0, binding = 0) uniform sampler2D font_sampler;

layout (set = 0, binding = 1) readonly buffer Line {
  uint chars[];
} line;

layout (rgba8, set = 0, binding = 2) writeonly uniform image2D image;
// layout (rgba8, set = 1, binding = 0) writeonly uniform image2D image;

layout (push_constant) uniform Inputs {
  int x_offset;
  int y_offset;
  int img_width;
  int img_height;
  uint index;
} inputs;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
// layout (local_size_x = 16, local_size_y = 8, local_size_z = 1) in;

vec4 char_bbox(uint char) {
  float y0 = 0.0;
  float y1 = 8.0;

  float x0 = float(char) * 8.0;
  float x1 = x0 + 8.0;

  return vec4(x0, y0, x1, y1);
}

void draw_char_at(uint char, ivec2 pixel) {
  vec2 local = vec2(gl_LocalInvocationID.xy);
  ivec2 p = pixel + ivec2(gl_LocalInvocationID.xy);

  if (p.x >= inputs.img_width || p.y >= inputs.img_height) {
    return;
  }

  vec4 bbox = char_bbox(char);

  vec2 char_offset = bbox.xy;

  vec4 color = texture(font_sampler, char_offset + local);

  imageStore(image, p, color);
}

void main() {
  ivec2 start = ivec2(inputs.x_offset, inputs.y_offset);

  if (start.x >= inputs.img_width || start.y >= inputs.img_height) {
    return;
  }

  uint byte_offset = uint(gl_GlobalInvocationID.z);

  uint pixel_offset = byte_offset * 8;

  uint char = line.chars[inputs.index + byte_offset];

  draw_char_at(char, start + ivec2(pixel_offset, 0));


}
